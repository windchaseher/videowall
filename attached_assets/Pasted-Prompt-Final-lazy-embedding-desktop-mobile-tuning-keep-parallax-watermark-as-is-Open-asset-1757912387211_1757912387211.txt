Prompt — Final lazy embedding + desktop/mobile tuning (keep parallax & watermark as-is)

Open /assets/js/main.js and make these adjustments:

1) Ensure we have a Vimeo URL builder at the top (keep if already present):
function buildVimeoUrl(base) {
  try {
    const url = new URL(base);
    const p = url.searchParams;
    p.set('autoplay','1'); p.set('muted','1'); p.set('loop','1'); p.set('background','1');
    url.search = p.toString();
    return url.toString();
  } catch {
    return base + (base.includes('?') ? '&' : '?') + 'autoplay=1&muted=1&loop=1&background=1';
  }
}

2) After 'use strict', add:
const isSmall = window.matchMedia('(max-width: 768px)').matches;
const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

3) In the render loop where each clip wrapper is built:
- CLAMP overlap to a subtle range; soften further on phones:
let ov = (typeof c.overlap === 'number' ? c.overlap : -10);
ov = Math.max(isSmall ? -8 : -12, Math.min(isSmall ? -4 : -6, ov));
if (i > 0) wrap.style.marginTop = `${ov}px`;
wrap.style.marginBottom = '4px';

- SCALE parallax for small screens:
const baseSpeed = Number(c.parallax || 0);
const speed = (isSmall || prefersReduced) ? baseSpeed * 0.6 : baseSpeed;
wrap.dataset.speed = String(speed);

- DO NOT create the iframe immediately; create a frame with deferred URL:
const frame = document.createElement('div');
frame.className = 'frame';
if (c.aspect && typeof c.aspect === 'number') frame.style.aspectRatio = `${c.aspect} / 1`;
const finalUrl = buildVimeoUrl(c.embedUrl);
frame.dataset.embed = finalUrl; // defer actual iframe creation
frame.style.background = '#000';
wrap.appendChild(frame);

4) Add the lazy-embed logic after the render loop:

const frames = Array.from(document.querySelectorAll('.frame'));
const maxConcurrentLoads = isSmall ? 3 : 8;           // higher on desktop
const rootMarginY         = isSmall ? '1200px' : '2400px'; // prefetch farther on desktop
let inFlight = 0;
const queue = [];

function mountIframe(frame) {
  if (frame.dataset.mounted === '1') return;
  const src = frame.dataset.embed;
  if (!src) return;

  if (inFlight >= maxConcurrentLoads) { queue.push(frame); return; }
  inFlight++;

  const iframe = document.createElement('iframe');
  iframe.src = src;
  iframe.setAttribute('allow', 'autoplay; fullscreen; picture-in-picture');
  iframe.setAttribute('loading', 'lazy');
  Object.assign(iframe.style, { border:'0', position:'absolute', inset:'0', width:'100%', height:'100%' });

  frame.style.position = 'relative';
  frame.appendChild(iframe);
  frame.dataset.mounted = '1';

  let settled = false;
  const settle = () => {
    if (settled) return;
    settled = true;
    inFlight = Math.max(0, inFlight - 1);
    const next = queue.shift();
    if (next) mountIframe(next);
  };
  const t = setTimeout(settle, 8000);
  iframe.addEventListener('load', () => { clearTimeout(t); settle(); }, { once: true });
}

const io = ('IntersectionObserver' in window)
  ? new IntersectionObserver((entries) => {
      entries.forEach(e => {
        if (e.isIntersecting) {
          mountIframe(e.target);
          io.unobserve(e.target);
        }
      });
    }, { root: null, rootMargin: `${rootMarginY} 0px`, threshold: 0.01 })
  : null;

frames.forEach((f, idx) => {
  if (!isSmall && idx < 3) mountIframe(f); // eager-mount top 3 on desktop
  if (io) io.observe(f); else mountIframe(f);
});

5) Ensure parallax uses the element-relative version (replace applyParallax if needed):

let ticking = false;
function applyParallax() {
  const viewportCenter = window.innerHeight / 2;
  document.querySelectorAll('.clip').forEach(el => {
    const s = parseFloat(el.dataset.speed || '0') || 0;
    if (!s) { el.style.transform = ''; return; }
    const rect = el.getBoundingClientRect();
    const elCenter = rect.top + rect.height / 2;
    const delta = viewportCenter - elCenter;
    el.style.transform = `translateY(${delta * s}px)`;
  });
  ticking = false;
}
const onScroll = () => { if (!ticking) { ticking = true; requestAnimationFrame(applyParallax); } };
window.addEventListener('scroll', onScroll, { passive: true });
window.addEventListener('resize', onScroll);
window.addEventListener('load', onScroll);
applyParallax();

Do NOT change any other behavior (Vimeo URL builder, watermark, audio).

After changes, verify:
- Desktop: top 2–3 videos visible instantly; scrolling loads the rest smoothly.
- Mobile: no permanent blanks; videos appear as you approach them.
- Parallax visible across the page; clips don’t fully cover each other.

Reply only with:
"STEP DONE — final lazy embedding (desktop/mobile) applied and verified"
